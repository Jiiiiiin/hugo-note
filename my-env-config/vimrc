"不与 Vi 兼容（采用 Vim 自己的操作命令）
set nocompatible
" 输入法设置
set noimd
set imi=2
set ims=2

" 识别不同文件格式
filetype on
" 开启文件类型检查，并且载入与该类型对应的缩进规则。比如，如果编辑的是.py文件，Vim 就是会找 Python 的缩进规则~/.vim/indent/python.vim。
filetype indent on
filetype plugin on
filetype plugin indent on
" 开启自带补全功能
"set omnifunc=syntaxcomplete#Complete
"在底部显示，当前处于命令模式还是插入模式
set showmode
"命令模式下，在底部显示，当前键入的指令。比如，键入的指令是2y3d，那么底部就会显示2y3，当键入d的时候，操作完成，显示消失。
set showcmd
" 设置帮助文档
set helplang=cn 
if version >= 603
    set helplang=cn
    set encoding=utf-8
endif

"退格键默认删除光标所在字符，但这样感觉怪怪的，所以我们可以设置它删除光标所在字符的前一个字符，看起来更符合直观的印象
set backspace=2
"光标所在行显示一条下划线
set cursorline
" 修改在普通模式和插入模式不同的光标显示
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_SR = "\<Esc>]50;CursorShape=2\x7"
let &t_EI = "\<Esc>]50;CursorShape=0\x7"
" 让重新打开文件之后光标恢复到上一次编辑的位置
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
" 语法高亮
syntax on 
" 设置主题配色
let &t_ut=''
set background=dark
set guifont=DroidSansMono_Nerd_Font:h11
" 显示行号
set number
set relativenumber
"启用换行
set wrap
"只有遇到指定的符号（比如空格、连词号和其他标点符号），才发生折行。也就是说，不会在单词内部折行
set linebreak

" 指定折行处与编辑窗口的右边缘之间空出的字符数
"set wrapmargin=2
" 设置行宽，即一行显示多少个字符。
set textwidth=80
" 按 F2进入粘贴模式，即 set paste <> set nopaste
set pastetoggle=<F2>


" ========
" 搜索设置
" ========

" 光标遇到圆括号、方括号、大括号时，自动高亮对应的另一个圆括号、方括号和大括号
set showmatch
" 高亮检索
"”hlsearch”, 将会高亮所有匹配文本. 要去除高亮，:nohl
set hlsearch
exec "nohlsearch"
"搜索的时候逐字高亮匹配
"设置了”incsearch”, Vim会立刻跳到匹配文本位置
set incsearch
" 检索时忽略大小写
set ignorecase
" 智能大小写检索
" 如果同时打开了ignorecase，那么对于只有一个大写字母的搜索词，将大小写敏感；其他情况都是大小写不敏感
" 比如，搜索Test时，将不匹配test；搜索test时，将匹配Test
set smartcase
"光标移动时，编辑器底部显示当前行号与列号
set ruler 
" 设置折叠方式
" set foldmethod=indent
" 设置屏幕滚动时在光标上下方保留5行预览代码
set so=5
" set scrolloff=5

" 水平滚动时，光标距离行首或行尾的位置（单位：字符）。该配置在不折行时比较有用
" set sidescrolloff=15

"terminal Color 支持256色(默认是8色)
set t_CO=256
hi comment ctermfg=6 "设置注释颜色
"解决vim中文乱码问题
set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936
set termencoding=utf-8
set encoding=utf-8
" vim编辑的时候，优先使用unix风格，其次才是dos风格
set fileformat=unix "unix dos
set linespace=16
set autowriteall
" Vim缩进有关的设置总结 https://www.kawabangga.com/posts/2817
" https://www.ibm.com/developerworks/cn/linux/l-tip-vim1/index.html
" 制表符的宽度
set tabstop=4
" 缩进的空格数，在文本上按下>>（增加一级缩进）、<<（取消一级缩进）或者==（取消全部缩进）时，每一级的字符数。
set shiftwidth=4
" 由于 Tab 键在不同的编辑器缩进不一致，该设置自动将 Tab 转为空格。
set expandtab  " tab键永远输入的是空格
" 软制表符宽度，设置为非零数值后使用 Tab 键和 Backspace 时光标移动的格数等于该数值，但实际插入的字符仍受 tabstop 和 expandtab 控制
set softtabstop=0  " 关闭softtabstop 永远不要将空格和tab混合输入

" 缩进配置
" Smart indent
set smartindent
" 打开自动缩进，按下回车键后，下一行的缩进会自动跟上一行的缩进保持一致。
" never add copyindent, case error   " copy the previous indentation on autoindenting
" 自动缩进，即每行的缩进值与上一行相等；使用 noautoindent 取消设置
set autoindent


set backspace=indent,eol,start
set backupcopy=yes
"在 vim 自带状态栏显示键入命令
set showcmd


" ========
" 编辑设置
" ========

" 打开英语单词的拼写检查
" set spell spelllang=en_us

" 不创建备份文件。默认情况下，文件保存时，会额外创建一个备份文件
" 它的文件名是在原文件名的末尾，再添加一个波浪号（〜）
" set nobackup

" 不创建交换文件。交换文件主要用于系统崩溃时恢复文件，文件名的开头是.、结尾是.swp
" set noswapfile

" 保留撤销历史
"
" Vim 会在编辑时保存操作历史，用来供用户撤消更改
" 默认情况下，操作记录只在本次编辑时有效，一旦编辑结束、文件关闭，操作历史就消失了
"
" 打开这个设置，可以在文件关闭后，操作记录保留在一个文件里面，继续存在
" 这意味着，重新打开一个文件，可以撤销上一次编辑时的操作。撤消文件是跟原文件保存在一起的隐藏文件，文件名以.un~开头
"set undofile

" 设置备份文件、交换文件、操作历史文件的保存位置
" 结尾的//表示生成的文件名带有绝对路径，路径中用%替换目录分隔符，这样可以防止文件重名
"set backupdir=~/.vim/.backup//
"set directory=~/.vim/.swp//
"set undodir=~/.vim/.undo//

" Vim 需要记住多少次历史操作
set history=100

" 打开文件监视。如果在编辑过程中文件发生外部改变（比如被别的编辑器编辑了），就会发出提示
set autoread

" 可以使用鼠标
" set mouse=a

" 显示空格，便于检查
set list
set listchars=tab:▸\ ,trail:▫
" 命令模式下，底部操作指令按下 Tab 键自动补全。
" 第一次按下 Tab，会显示所有匹配的操作指令的清单；第二次按下 Tab，会依次选择各个指令
set wildmenu
set wildmode=longest:list,full
"" 禁止使用上下左右键
"nnoremap <Up> :echomsg "Use k"<cr>
"nnoremap <Down> :echomsg "Use j"<cr>
"nnoremap <Left> :echomsg "Use h"<cr>
"nnoremap <Right> :echomsg "Use l"<cr>

" ===== mapping
map R :source $MYVIMRC<CR>
" 在配置文件中增加以下命令，在保存后自动应用配置
autocmd bufwritepost .vimrc source $MYVIMRC

" 设置 leader 键
let mapleader=','
" 设置取消高亮
noremap <leader><CR> :nohlsearch<CR>
" Quit visual mode
vnoremap v <Esc>
" 使用<c-d>来完成一行的删除
imap <c-d> <Esc>ddi
" 设置 insert 模式使用 leader 键+w 来进行文件的保存
inoremap <leader>w <Esc>:w<cr>`^
" 映射退出
map <leader>q :q<CR>
" 映射 jj-》Esc 键
inoremap jj <Esc>`^
noremap <leader+y> "+y 
noremap <c+p> "+cp
" sudo 强制写入
cnoremap w!! w !sudo tee % >/dev/null

" 大写JKHL重复五次执行
noremap J 5j
noremap K 5k
noremap H 5h
noremap L 5l

" 切换buffer
noremap <silent> [b :bprevious<CR>
noremap <silent> ]b :bnext<CR>

" 设置分屏 window
map <leader>v :set splitright<CR>:vsplit<CR>
map <leader>nv :set nosplitright<CR>:vsplit<CR>
map <leader>ns :set nosplitbelow<CR>:split<CR>
map <leader>s :set splitbelow<CR>:split<CR>

" 设置分屏大小调整
map <up> :res +5<CR>
map <down> :res -5<CR>
map <left> :vertical resize-5<CR>
map <right> :vertical resize+5<CR>
" use ctrl+h/j/k/l switch split window
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

source ~/.vim/.plugconfig.vim

" markdown snipt
"autocmd Filetype markdown inoremap <leader><leader> <Esc>/<++><CR>:nohlsearch<CR>c4l
"autocmd Filetype markdown inoremap <leader>d `` <++><Esc>F`i
"autocmd Filetype markdown inoremap <leader>c ```<Enter><++><Enter>```<Enter><Enter><++><Esc>4kA
"autocmd Filetype markdown inoremap <leader>i __ <++><Esc>F_i




